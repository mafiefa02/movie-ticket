// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Movie {
  id           Int        @id @default(autoincrement())
  title        String
  description  String     @db.Text
  release_date String
  poster_url   String
  age_rating   Int
  ticket_price Float
  showtimes    Showtime[]

  @@unique([title, release_date])
}

model Showtime {
  id      String   @id @default(cuid())
  date    DateTime
  movie   Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId Int
  tickets Ticket[]
}

model Seat {
  id         Int     @id @default(autoincrement())
  seatNumber String
  status     String  @default("AVAILABLE")
  ticket     Ticket? @relation("TicketToSeat", fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId   String?
}

model Ticket {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  seats      Seat[]   @relation("TicketToSeat")
  showtime   Showtime @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  showtimeId String
  createdAt  DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  balance       Float     @default(0)
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
